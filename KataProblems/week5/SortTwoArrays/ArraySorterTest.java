package KataProblems.week5.SortTwoArrays;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.runners.JUnit4;

public class ArraySorterTest {
    @Test
    public void exampleTests() {
        int[] a1 = {5, 4, 3, 2, 1};
        int[] a2 = {6, 5, 7, 8, 9};
        assertEquals(new int[][]{{4, 5, 3, 2, 1}, {9, 8, 7, 5, 6}}, ArraySorter.sortTwoArrays(a1, a2));
    }

    @Test
    public void example2() {
        int[] a3 = {2, 1, 3, 4, 5};
        int[] a4 = {5, 6, 7, 8, 9};
        assertEquals(new int[][]{{2, 1, 3, 4, 5}, {6, 5, 7, 8, 9}}, ArraySorter.sortTwoArrays(a3, a4));
    }

    @Test
    public void example3() {
        int[] a5 = {5, 6, 9, 2, 6, 5};
        int[] a6 = {3, 6, 7, 4, 8, 1};
        assertEquals(new int[][]{{5, 5, 2, 6, 9, 6}, {4, 3, 1, 6, 8, 7}}, ArraySorter.sortTwoArrays(a5, a6));
    }

    @Test
    public void example4() {
        int[] a7 = {};
        int[] a8 = {};
        assertEquals(new int[][]{{}, {}}, ArraySorter.sortTwoArrays(a7, a8));
    }

    @Test
    public void example5(){
        int[] a9 = {1};
        int[] a10 = {5};
        assertEquals( new int[][] {{1},{5}} , ArraySorter.sortTwoArrays(a9,a10));
    }

    @Test
    public void example6(){
        int[] a9 = {1,2,1};
        int[] a10 = {1,2,3};
        assertEquals( new int[][] {{1,2,1},{1,3,2}} , ArraySorter.sortTwoArrays(a9,a10));
    }

    @Test
    public void example8(){
        int[] a9 = {1,2,3,4,5};
        int[] a10 = {4,4,3,2,3};
        assertEquals( new int[][] {{4,3,5,1,2},{4,4,3,2,3}} , ArraySorter.sortTwoArrays(a9,a10));
    }

    @Test
    public void example7(){
        int[] a11 = {5,16,25,31,39,43,53,60,66,72,73,85,87,89,128,136,144,148,151,155,156,
                171,172,179,184,191,191,192,210,213,214,241,241,248,258,266,269,273,277,
                278,281,283,290,290,304,310,312,312,317,317,319,328,329,333,345,369,371,
                374,386,392,393,395,401,403,404,404,411,411,417,430,434,438,440,442,445,
                447,457,457,464,479,480,481,487,499,504,506,515,516,518,523,526,534,536,
                547,552,553,572,574,575,575,579,581,582,584,591,609,610,617,621,625,633,
                637,637,642,645,646,650,665,667,668,674,689,704,718,731,735,748,759,760,
                760,764,777,783,784,784,787,795,796,799,809,813,819,821,822,831,834,841,
                848,863,863,866,870,877,892,895,898,903,907,914,918,923,940,949,952,956,
                956,956,973,991,996,999};
        int[] a12 =  {649,994,500,92,175,772,201,962,717,365,682,59,150,284,996,48,109,959,869,424,304,220,
                220,784,360,266,638,317,956,410,225,903,488,193,799,59,294,819,901,292,663,50 ,939,375,28,85,340,
                259,297,698,689,801,114,733,517,130,613,257,325,929,611,920,605,252,448,27,306,474,718,197,958,
                450,560,437,345,803,251,16,895,866,171,584,196,106,603,336,409,361,551,339,866,20,783,
                421,585,916,191,248,990,640,255,389,346,837,743,306,339,841,274,837,171,808,898,714,477,
                290,246,690,842,143,513,710,229,758,990,889,870,294,174,718,728,332,674,926,2,844,155,733,
                319,989,738,820,740,880,140,364,436,43,208,52,108,462,47,725,390,816,897,699,858,938,786,35,
                431,682,301,700,830,168,546,622,485 };
        assertEquals( new int[][] {{784,457,534,404,304,940,848,877,136,283,863,85,266,310,31,499,866,144,329,
                        369,831,668,87,795,973,480,633,760,39,572,248,487,430,53,863,171,172,214,704,650,574,
                        457,403,579,374,312,191,621,89,646,278,759,269,317,956,156,411,609,192,799,386,777,506,
                        610,523,312,445,582,184,516,834,72,290,581,895,515,213,547,155,949,841,442,404,438,870,
                        411,645,999,241,25,674,345,991,518,440,481,552,504,401,393,371,996,191,575,5,281,783,952,
                        73,319,665,317,907,956,689,642,66,417,760,892,764,333,796,813,821,591,718,43,536,179,923,
                        258,328,447,637,898,273,819,956,584,625,617,667,787,914,526,479,151,748,822,735,464,903,
                        637,277,241,553,395,784,392,918,290,210,434,148,60,809,575,731,16,128},
                {649,994,500,92,175,772,201,962,717,365,682,59,150,284,996,48,109,959,869,424,304,220,220,
                        784,360,266,638,317,956,410,225,903,488,193,799,59,294,819,901,292,663,50,939,375,28,85,340,
                        259,297,698,689,801,114,733,517,130,613,257,325,929,611,920,605,252,448,27,306,474,718,197,958,
                        450,560,437,345,803,251,16,895,866,171,584,196,106,603,336,409,361,551,339,866,20,783,421,585,
                        916,191,248,990,640,255,389,346,837,743,306,339,841,274,837,171,808,898,714,477,290,246,690,842,
                        143,513,710,229,758,990,889,870,294,174,718,728,332,674,926,2,844,155,733,319,989,738,820,740,
                        880,140,364,436,43,208,52,108,462,47,725,390,816,897,699,858,938,786,35,431,682,301,700,830,168,
                        546,622,485}},
                ArraySorter.sortTwoArrays(a11,a12));
    }

}
